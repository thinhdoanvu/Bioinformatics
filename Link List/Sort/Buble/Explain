Ý tưởng:
1. Gán node p là node đầu danh sách
	(for i=0)
2. Kiểm tra thử node p này có phải là node cuối cùng (NULL) hay chưa?
	(i<n)
	2.1. Nếu chưa thì...
		2.1.1. Gán node q là node kế của p
		(for j=i+1)
			2.1.2. Kiểm tra node q này có phải là node cuối cùng của danh sách chưa
				(j<n)
				2.1.2.1. Nếu chưa thì...
					(j++)
					2.1.2.1.1. Kiểm tra (data_p > data_q)
						2.1.2.1.1.1. Nếu đúng thì...
							Đổi chỗ 2 node p và q
						2.1.2.1.1.2. Nếu sai thì..
							Lặp lại 2.1.2
				2.1.2.2. Nếu q là node cuối cùng của danh sách thì
					(j=n)
			2.1.3. Tăng node p lên node kế tiếp
	 			(i++)
			2.1.4. Lặp lại 2
2.2. Nếu node p là NULL thì in lại danh sách sau khi Sắp xếp
	(i==n)
/////////////////////// Ý tưởng của Mảng 1 chiều ///////////////////
for(i=0;i<n-1;i++)        | i=0;
{                         | while(i<n-1)  
  for(j=i+1;j<n;j++)      | {
  {                       |   j=i+1;
    if(A[i]>A[j])         |   while(j<n)
    {                     |   {   
      tam=A[i];           |     if(A[i]>A[j])
      A[i]=A[j];          |     {
      A[j]=tam;           |       tam=A[i];A[i]=A[j];A[j]=tam;
    }                     |     }
  }                       |     j++;
}                         |   }
                          |   i++;   
                          |  }
///////////////// Ý tưởng của DSLK /////////////////////
i=0;                                | p=head;
while(i<n-1)                        | while(p!=NULL)
{                                   | {
  j=i+1;                            |    q=p->next;
  while(j<n)                        |    while(q!=NULL)
  {                                 |    {
    if(A[i]>A[j])                   |       if(p->data > q->data)
    {                               |       {
      tam=A[i];A[i]=A[j];A[j]=tam;  |         tam->data = p->data; p->data = q->data; q->data = tam->data;
    }                               |       }
    j++;                            |       q=q->next;
  }                                 |    }
  i++;                              |    p=p->next;
}                                   | }
inmang();                           |indanhsach();
