BFS (G, s)                   //Where G is the graph and s is the source node
      let Q be queue.
      Q.enqueue( s ) //Inserting s in queue until all its neighbour vertices are marked.

      mark s as visited.
      while ( Q is not empty)
           //Removing that vertex from queue,whose neighbour will be visited now
           v  =  Q.dequeue( )

          //processing all the neighbours of v  
          for all neighbours w of v in Graph G
               if w is not visited 
                        Q.enqueue( w )             //Stores w in Q to further visit its neighbour
                        mark w as visited.

Queue:
        front
          |
          v
        ----------------------
-->       |  |  |  |  |  |  |  ---> 
insert    |  |  |  |  |  |  |  delete
        ----------------------
                            ^
                            |
                           rear
                                       
Example
   S
  / \
 1---2
 /   |
3    4
|
5
  
The traversing will start from the source node and push s in queue. s will be marked as 'visited'.

First iteration
s will be popped from the queue
Neighbors of s i.e. 1 and 2 will be traversed
1 and 2, which have not been traversed earlier, are traversed. They will be:
Pushed in the queue
1 and 2 will be marked as visited

Second iteration
1 is popped from the queue
Neighbors of 1 i.e. s and 3 are traversed
s is ignored because it is marked as 'visited'
3, which has not been traversed earlier, is traversed. It is:
Pushed in the queue
Marked as visited

Third iteration
2 is popped from the queue
Neighbors of 2 i.e. s, 3, and 4 are traversed
3 and s are ignored because they are marked as 'visited'
4, which has not been traversed earlier, is traversed. It is:
Pushed in the queue
Marked as visited

Fourth iteration
3 is popped from the queue
Neighbors of 3 i.e. 1, 2, and 5 are traversed
1 and 2 are ignored because they are marked as 'visited'
5, which has not been traversed earlier, is traversed. It is:
Pushed in the queue
Marked as visited

Fifth iteration
4 will be popped from the queue
Neighbors of 4 i.e. 2 is traversed
2 is ignored because it is already marked as 'visited'

Sixth iteration
5 is popped from the queue
Neighbors of 5 i.e. 3 is traversed
3 is ignored because it is already marked as 'visited'
The queue is empty and it comes out of the loop. All the nodes have been traversed by using BFS.
1 - 2 - 3 - 4 - 5
